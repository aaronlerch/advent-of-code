#!/usr/bin/env ruby

require 'parallel'

INPUT_FILE = "input.txt"
input = File.readlines(INPUT_FILE).map(&:chomp)

module Direction
  UP = '^'.freeze
  RIGHT = '>'.freeze
  DOWN = 'v'.freeze
  LEFT = '<'.freeze

  MAP = {
    UP => RIGHT,
    RIGHT => DOWN,
    DOWN => LEFT,
    LEFT => UP
  }.freeze
end

class Guard
  attr_reader :initial_x, :initial_y, :initial_direction
  attr_accessor :x, :y, :direction
  attr_reader :history, :history_tally

  def initialize(x, y, direction)
    @initial_x = @x = x
    @initial_y = @y = y
    @initial_direction = @direction = direction
    # Guard's history includes their starting position
    @history = [[@x, @y, @direction]]
    @history_tally = {
      [@x, @y, @direction] => 1
    }
  end

  def location
    [@x, @y]
  end

  def next_location
    case @direction
    when Direction::UP
      [@x,@y-1]
    when Direction::RIGHT
      [@x+1,@y]
    when Direction::DOWN
      [@x,@y+1]
    when Direction::LEFT
      [@x-1,@y]
    end
  end

  # location == [x,y]
  def move_to(location)
    @x, @y = location
    his = [@x, @y, @direction]
    @history << his
    @history_tally[his] ||= 0
    @history_tally[his] += 1
  end

  def turn
    @direction = Direction::MAP[@direction]
  end

  def reset
    @x = @initial_x
    @y = @initial_y
    @direction = @initial_direction
    # Guard's history includes their starting position
    @history = [[@x, @y, @direction]]
    @history_tally = {
      [@x, @y, @direction] => 1
    }
  end

  def to_s
    "[#{@x},#{@y}], #{@direction}"
  end
end

class Lab
  attr_reader :grid, :guard, :height, :width

  def initialize(input)
    @grid = []
    input.each { |line| @grid << line.chars }

    @height = @grid.length
    @width = @grid.first.length

    @grid.each_with_index do |row,y|
      next if @guard
      row.each_with_index do |col,x|
        next if @guard
        @guard = Guard.new(x,y,Direction::UP) if col == Direction::UP
      end
    end

    unless @guard
      puts "UNABLE TO INIT GUARD LOCATION"
      exit 1
    end

    # Change the guard's initial position back to a '.' since the guard can pass through it again
    @grid[@guard.y][@guard.x] = '.'

    # deep copy
    # @original_grid = Marshal.load(Marshal.dump(@grid))
    @added_obstacle_locations = []
  end

  def add_obstacle(location)
    @added_obstacle_locations << location
    x, y = location
    @grid[y][x] = '#'
  end

  def is_off_grid(location)
    x, y = location
    off_grid = x < 0 || x >= @width || y < 0 || y >= @height
    return off_grid
  end

  def can_move_to(location)
    x, y = location
    thing = @grid[y][x]
    thing != '#'
  end

  def move_guard
    next_loc = nil

    loop do
      next_loc = @guard.next_location
      return false if is_off_grid(next_loc)

      break if can_move_to(next_loc)
      @guard.turn
    end

    unless next_loc
      puts "UNEXPECTED: UNABLE TO DETERMINE NEXT LOCATION FOR GUARD"
      exit 1
    end

    @guard.move_to(next_loc)
    true
  end

  def detect_loop
    # Look through the guard's history
    # we're in a loop if the guard's history has duplicates occuring >= 4 times
    @guard.history_tally.values.any? { |v| v >= 4 }
  end

  def reset
    @added_obstacle_locations.each do |obs_loc|
      x, y = obs_loc
      @grid[y][x] = '.'  # put it back!
    end
    @added_obstacle_locations = []
    # @grid = Marshal.load(Marshal.dump(@original_grid))
    @guard.reset
  end
end

@lab = Lab.new(input)
puts "Lab size: h=#{@lab.height}, w=#{@lab.width}"

@guard = @lab.guard
# puts "Guard starting position: #{@guard.to_s}"

loop do
  moved = @lab.move_guard
  break unless moved
end

historical_locations = @guard.history.map { |h| [h[0],h[1]] }.uniq

# Part 1
puts "PART 1"
puts "Distinct guard positions: #{historical_locations.length}"

# Part 2
puts "PART 2"
# remove the guard's starting location from the historical locations for this test
historical_locations.delete [@guard.initial_x, @guard.initial_y]

loop_count = 0

# Place an obstacle at every position the guard walks, and see if it puts the guard into a loop
Parallel.each(historical_locations, progress: "Testing Locations", in_processes: 5, finish: -> (item, i, result) { loop_count += result }) do |loc|

    loop_detected = false

    @lab.reset
    @lab.add_obstacle loc

    loop do
      moved = @lab.move_guard
      if !moved
        break
      end

      looped = @lab.detect_loop
      if looped
        loop_detected = true
        #loop_count += 1
        break
      end
    end

    loop_detected ? 1 : 0
    #loop_count += 1 if looped
end

Process.waitall

puts ""

puts "Loops caused: #{loop_count}"