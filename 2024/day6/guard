#!/usr/bin/env ruby

INPUT_FILE = "input.txt"
input = File.readlines(INPUT_FILE).map(&:chomp)

module Direction
  UP = '^'
  RIGHT = '>'
  DOWN = 'v'
  LEFT = '<'

  MAP = {
    UP => RIGHT,
    RIGHT => DOWN,
    DOWN => LEFT,
    LEFT => UP
  }
end

class Guard
  attr_accessor :x, :y, :direction
  attr_reader :history

  def initialize(x, y, direction)
    @x = x
    @y = y
    @direction = direction
    # Guard's history includes their starting position
    @history = [[@x,@y]]
  end

  def location
    [@x, @y]
  end

  def next_location
    case @direction
    when Direction::UP
      [@x,@y-1]
    when Direction::RIGHT
      [@x+1,@y]
    when Direction::DOWN
      [@x,@y+1]
    when Direction::LEFT
      [@x-1,@y]
    end
  end

  # location == [x,y]
  def move_to(location)
    @x, @y = location
    @history << [@x,@y]
  end

  def turn
    @direction = Direction::MAP[@direction]
  end

  def to_s
    "[#{@x},#{@y}], #{@direction}"
  end
end

class Lab
  attr_reader :grid, :guard, :height, :width

  def initialize(input)
    @grid = []
    input.each { |line| @grid << line.chars }

    @height = @grid.length
    @width = @grid.first.length

    @grid.each_with_index do |row,y|
      next if @guard
      row.each_with_index do |col,x|
        next if @guard
        @guard = Guard.new(x,y,Direction::UP) if col == Direction::UP
      end
    end

    unless @guard
      puts "UNABLE TO INIT GUARD LOCATION"
      exit 1
    end

    # Change the guard's initial position back to a '.' since the guard can pass through it again
    @grid[@guard.y][@guard.x] = '.'
  end

  def is_off_grid(location)
    x, y = location
    return x < 0 || x >= @width || y < 0 || y >= @height
  end

  def can_move_to(location)
    x, y = location
    thing = @grid[y][x]
    thing != '#'
  end

  def move_guard
    next_loc = nil

    loop do
      next_loc = @guard.next_location
      return false if is_off_grid(next_loc)

      break if can_move_to(next_loc)
      @guard.turn
    end

    unless next_loc
      puts "UNEXPECTED: UNABLE TO DETERMINE NEXT LOCATION FOR GUARD"
      exit 1
    end

    @guard.move_to(next_loc)
    true
  end
end

@lab = Lab.new(input)
puts "Lab size: h=#{@lab.height}, w=#{@lab.width}"

@guard = @lab.guard

loop do
  break unless @lab.move_guard
end

puts "Distinct guard positions: #{@guard.history.uniq.length}"
