#!/usr/bin/env ruby

INPUT_FILE = "input.txt"
input = File.readlines(INPUT_FILE).map(&:chomp)

module Direction
  UP = '^'
  RIGHT = '>'
  DOWN = 'v'
  LEFT = '<'
end

class Guard
  attr_accessor :x, :y, :direction
  attr_reader :history

  def initialize(x, y, direction)
    @x = x
    @y = y
    @direction = direction
    @history = []
  end

  def location
    [@x, @y]
  end

  def next_location
    case @direction
    when Direction::UP
      [@x,@y-1]
    when Direction::RIGHT
      [@x+1,@y]
    when Direction::DOWN
      [@x,@y+1]
    when Direction::LEFT
      [@x-1,@y]
    end
  end

  # location == [x,y]
  def move_to(location)
    x, y = location
    @history << [@x,@y]
    @x = x
    @y = y
  end

  def turn
    case @direction
    when Direction::UP
      turn(Direction::RIGHT)
    when Direction::RIGHT
      turn(Direction::DOWN)
    when Direction::DOWN
      turn(Direction::LEFT)
    when Direction::LEFT
      turn(Direction::UP)
    else
      turn(Direction::UP)
    end
  end

  def turn(direction)
    @direction = direction
  end

  def to_s
    "[#{@x},#{@y}], #{@direction}"
  end
end

class Lab
  attr_reader :grid, :guard

  def initialize(input)
    @grid = []
    input.each { |line| @grid << line.chars }

    @grid.each_with_index do |row,y|
      next if @guard
      row.each_with_index do |col,x|
        next if @guard
        @guard = Guard.new(x,y,Direction::UP) if col == Direction::UP
        # now that we have the guard's initial location, reset it to an empty spot (the guard can move through it later)
        @grid[y][x] = '.'
      end
    end

    unless @guard
      puts "UNABLE TO INIT GUARD LOCATION"
      exit 1
    end
  end

  # location == [x,y]
  def at(location)
    @grid[location[1]][location[0]]
  end

  def can_move_to(location)
    at(location) != '#'
  end

  def move_guard
    next_loc = @guard.next_location
    while !can_move_to next_loc
      @guard.turn
      next_loc = @guard.next_location
    end

    @guard.move_to next_loc
    puts "Guard is at #{@guard}"
  end
end

@lab = Lab.new(input)
@guard = @lab.guard
puts "Guard is at #{@guard}"

@lab.move_guard

puts "Distinct guard positions: #{@guard.history.uniq.length}"
