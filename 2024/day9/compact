#!/usr/bin/env ruby

INPUT_FILE = "input.txt"
input = File.readlines(INPUT_FILE).map(&:chomp)

DEBUG = 0
NORMAL = 1
NONE = 3

LOG_LEVEL = NONE # NORMAL # DEBUG

layout = input.first.chars.map(&:to_i)
disk = []

puts "#{layout.length} blocks"

id = 0
is_file = true

# brute force this thing by fully expanding all specified fils and free spaces into blocks
layout.each_with_index do |block_size, idx|
    is_file = idx % 2 == 0 # even index is file, odd is free space
    disk += Array.new(block_size, is_file ? id : nil)
    id += 1 if is_file
end

# Compact the disk by moving each file to the left-most location that will fit it.
# Each iteration,
# move the back pointer to the start of the next file block, and count how big the file is
# iterate the front pointer until it reaches a nil value with enough contiguous nil values to fit the file block size
#   if a spot is found, move the file to the front pointer location
#   if a spot isn't found before reaching the back pointer location, the file doesn't move, skip it

def log(prefix, message, level=NORMAL)
    return unless LOG_LEVEL <= level
    prefix = prefix.to_s
    prefix = "#{prefix}: " unless prefix.empty?
    puts "#{prefix}#{message}"
end

def log_disk(disk, level=NORMAL)
    disk_msg = disk.map {|d| d ? d : '.' }.join('')
    log("", disk_msg, level)
end

log_disk(disk)

last_file_id = nil
current_file_id = nil
back = disk.length - 1

while (!last_file_id || last_file_id > 1) && back > 0
    log_prefix = 0

    # find the end of the next file block to process
    log(log_prefix+=1, "Looking for the next file block to process (back=#{back})", DEBUG)

    while !disk[back] && back > 0
        back -= 1
    end

    # we are processing a file, find the start of it
    current_file_id = disk[back]
    
    log(log_prefix+=1, "Found file block #{current_file_id} at #{back}", DEBUG)
    start = back
    while start-1 > 0 && disk[start-1] == current_file_id
        start -= 1
    end

    
    log(log_prefix+=1, "Found start of file block #{current_file_id} at #{start}", DEBUG)

    # the file goes from start to back
    file_size = back - start + 1 # inclusive range

    log(log_prefix+=1, "File size of file block #{current_file_id}: #{file_size}", DEBUG)

    log(log_prefix+=1, "Looking for free space starting at the front", DEBUG)

    # now starting at the beginning, find the first block of free space of size >= file_size
    front = free_start = 0
    found_space = false
    while !found_space && front < start
        while disk[front] && front < disk.length - 1
            front += 1
        end

        log(log_prefix+=1, "Found free space block at #{front}", DEBUG)

        # we are at a free space block, check if it's big enough
        free_start = front
        space_size = 0
        while !disk[front] && front < start
            space_size += 1
            front += 1
        end

        log(log_prefix+=1, "Found free space block of size #{space_size} at #{free_start}", DEBUG)

        if space_size >= file_size
            found_space = true
            log(log_prefix+=1, "Found space (size=#{space_size}) for file block #{current_file_id} (size=#{file_size}) at #{free_start}", DEBUG)
            break
        end
    end

    if found_space
        # move the file to the free space
        log(log_prefix+=1, "Moving file block #{current_file_id} to free space at #{free_start} (start=#{start})", DEBUG)
        disk[free_start...(free_start+file_size)] = Array.new(file_size, current_file_id)
        disk[start...(start+file_size)] = Array.new(file_size, nil)
        log_disk(disk)
    end

    last_file_id = current_file_id
    back = start - 1 # continue at one spot earlier than the start of our last known file block
end

log_disk(disk)

checksum = 0
disk.each_with_index do |block, idx|
    next unless block
    checksum += idx * block
end

puts "Checksum: #{checksum}"