#!/usr/bin/env ruby

INPUT_FILE = "input.txt"
input = File.readlines(INPUT_FILE).map(&:chomp)

# key = number that must be before values
numbers_after = {}
# key = number that must be after values
numbers_before = {}
updates = []

input.each do |line|
  next if line.empty?
  first,second = line.split "|"

  if second
    a = first.to_i
    b = second.to_i
    numbers_after[a] ||= []
    numbers_after[a] << b

    numbers_before[b] ||= []
    numbers_before[b] << a
  else
    updates << first.split(",").map(&:to_i)
  end
end

def right_order?(update, rules)
  update.each_with_index do |page,i|
    # check prior numbers
    (0...i).each do |idx|
      r = rules[update[idx]]
      # if there's no rule for the page, ignore and keep going
      next unless r
      # make sure the prior page rule includes the current page (current must come after prior)
      return false unless r.include? page
    end

    # check subsequent numbers against the current page rule
    r = rules[page]
    if r
      (i+1...update.length).each do |idx|
        # make sure the subsequent page exists in the rule set
        return false unless r.include?(update[idx])
      end
    end
  end

  true
end

def fix(update, numbers_before)
  update.sort_by { |page| (numbers_before[page] & update).length }
end

correct_updates = []
fixed = []

updates.each do |update|
  if right_order?(update, numbers_after)
    correct_updates << update
  else
    fixed << fix(update, numbers_before)
  end
end

total = 0
correct_updates.each { |u| total += u[u.length / 2] }
puts "Correct updates total: #{total}"

total = 0
fixed.each { |u| total += u[u.length / 2] }
puts "Fixed incorrect updates total: #{total}"
