#!/usr/bin/env ruby

require 'pp'

INPUT_FILE = "input.txt"
input = File.readlines(INPUT_FILE).map(&:chomp)

# every fs entry is
# name: { type: :file, size: 1234 }
# or
# name: { type: dir, size: 1234, children: {} }
# where size == aggregate size for a directory

ROOT = "/"

fs = {
  "/" => { type: :dir, size: 0, children: {} }
}
path = []
current = fs[ROOT]

def traverse_to(fs, path)
  location = fs[ROOT]
  path.each do |name|
    # assume we're only navigating directories in the path
    location = location[:children][name]
  end
  location
end

# Process the input and build a directory tree
input.each do |cmd|
  case cmd
  when /\$ (cd|ls)(.*)/
    # $1 is the cmd, $2 is an arg
    if $1 == "cd"
      dir_arg = $2.strip
      case dir_arg
      when ROOT
        path = []
        current = fs[ROOT]
      when ".."
        path.pop
        current = traverse_to(fs, path)
      else
        path << dir_arg
        current = traverse_to(fs, path)
      end
    end
  when /dir (\S+)/
    # $1 is the directory name to log
    new_dir_name = $1.strip
    current[:children][new_dir_name] = { type: :dir, size: 0, children: {} }
  when /(\d+) (\S+)/
    # $1 is the size, $2 is the filename
    size = $1.strip.to_i
    fname = $2.strip
    current[:children][fname] = { type: :file, size: size }
  end
end

puts "Built the filesystem"
# pp fs

# Part one: size all directories
# find all with sizes at most 100000

def size_dir(dir)
  # process all subdirs first, then total those with files to create size of current dir
  dirs = dir[:children].select { |k,v| v[:type] == :dir }
  files = dir[:children].select { |k,v| v[:type] == :files }

  dirs.values.each do |v|
    size_dir(v)
  end

  dir[:size] = dir[:children].values.sum { |i| i[:size] }
end

size_dir(fs[ROOT])
puts "Sized the filesystem"

TOTAL_DISK=70000000
REQ_MIN_FREE=30000000

$current_used_size = fs[ROOT][:size]
$current_unused = TOTAL_DISK-$current_used_size
$need_to_find = REQ_MIN_FREE-$current_unused

# find the smallest directory that is larger than `need_to_find`

$current_smallest_dir_size = TOTAL_DISK # we've got to find something smaller than this

def find_dir(dir)
  sz = dir[:size]
  $current_smallest_dir_size = sz if sz < $current_smallest_dir_size && sz >= $need_to_find
  # we only need to traverse children if the current size is bigger than what we need to find
  # by definition, if our current size isn't big enough, going deeper in the tree is wasteful
  if sz > $need_to_find
    dirs = dir[:children].select { |k,v| v[:type] == :dir }
    dirs.values.each do |d|
      find_dir(d)
    end
  end
end

find_dir(fs[ROOT])

puts "Smallest dir size found: #{$current_smallest_dir_size}"
