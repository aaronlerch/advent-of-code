#!/usr/bin/env ruby

INPUT_FILE = "input.txt"
input = File.readlines(INPUT_FILE).map(&:chomp)

trees = Array.new(input.first.length)
trees = {}

MAX_X = input.first.length
MAX_Y = input.length

# read input into tree map
input.each_with_index do |row,y|
  row.split('').each_with_index do |t,x|
    trees[[x,y]] = t
  end
end

puts "Tree grid #{MAX_X} x #{MAX_Y}"

def log(x,y,val,dir)
  puts "#{x}x#{y} (#{val}) obscures #{dir}"
end

def tree_is_visible(x, y, grid)
  coord = [x,y]
  tree = grid[coord]
  puts "Checking tree #{x}x#{y} (#{tree})"

  return false if tree == 0 # interior trees of the shortest size can never be seen

  # Assume visible on all sides until proven obscured
  west, east, north, south = true

  # look for taller trees to the west
  (x-1).downto(0).each do |_x|
    val = grid[[_x,y]]
    if val >= tree
      log(_x,y,val,"west")
      west = false
      break
    end
  end

  # look for taller trees to the east
  (x+1..MAX_X-2).each do |_x|
    val = grid[[_x,y]]
    if val >= tree
      log(_x,y,val,"east")
      east = false
      break
    end
  end

  # look for taller trees to the north
  (y-1).downto(0).each do |_y|
    val = grid[[x,_y]]
    if val >= tree
      log(x,_y,val,"north")
      north = false
      break
    end
  end

  # look for taller trees to the south
  (y+1..MAX_Y-2).each do |_y|
    val = grid[[x,_y]]
    if val >= tree
      log(x,_y,val,"south")
      south = false
      break
    end
  end

  return west || east || north || south
end

# we know all border trees are visible, so count them (don't double count the corners)
visible_trees = MAX_X * 2 + MAX_Y * 2 - 4

# Check all interior trees
(1..MAX_X-2).each do |x|
  (1..MAX_Y-2).each do |y|
    visible_trees += 1 if tree_is_visible(x, y, trees)
  end
end

puts "Visible trees: #{visible_trees}"
