#!/usr/bin/env ruby

INPUT_FILE = "input.txt"
input = File.readlines(INPUT_FILE).map(&:chomp)

trees = Array.new(input.first.length)
trees = {}

MAX_X = input.first.length
MAX_Y = input.length

# read input into tree map
input.each_with_index do |row,y|
  row.split('').each_with_index do |t,x|
    trees[[x,y]] = t.to_i
  end
end

puts "Tree grid #{MAX_X}x#{MAX_Y}"

def log(x,y,val,dir)
  #puts "#{x}x#{y} (#{val}) obscures #{dir}"
end

def scenic_score(x, y, grid)
  tree = grid[[x,y]]
  #puts "Checking tree #{x}x#{y} (#{tree})"

  return 0 if x == 0 || y == 0 || x == MAX_X-1 || y == MAX_Y-1 # edge trees always have a scenic score of 0

  scores = []

  # look for taller trees to the west
  found = false
  (x-1).downto(0).each do |_x|
    val = grid[[_x,y]]
    if val >= tree
      log(_x,y,val,"west")
      scores << x - _x
      found = true
      break
    end
  end

  scores << x unless found

  # look for taller trees to the east
  found = false
  (x+1..MAX_X-1).each do |_x|
    val = grid[[_x,y]]
    if val >= tree
      log(_x,y,val,"east")
      scores << _x - x
      found = true
      break
    end
  end

  scores << MAX_X-1 - x unless found

  # look for taller trees to the north
  found = false
  (y-1).downto(0).each do |_y|
    val = grid[[x,_y]]
    if val >= tree
      log(x,_y,val,"north")
      scores << y - _y
      found = true
      break
    end
  end

  scores << y unless found

  # look for taller trees to the south
  found = false
  (y+1..MAX_Y-1).each do |_y|
    val = grid[[x,_y]]
    if val >= tree
      log(x,_y,val,"south")
      scores << _y - y
      found = true
      break
    end
  end

  scores << MAX_Y-1 - y unless found

  #puts "Scores for #{x}x#{y} are #{scores}"

  return scores.inject(:*)
end

scores = {}

# Check all trees
(0..MAX_Y-1).each do |y|
  (0..MAX_X-1).each do |x|
    scores[[x,y]] = scenic_score(x, y, trees)
  end
end

# write out tree score map -- it won't format but that's ok
(0..MAX_Y-1).each do |y|
  (0..MAX_X-1).each do |x|
    print scores[[x,y]].to_s + " "
  end
  puts
end

puts
puts

puts "Highest scenic score: #{scores.values.max}"
