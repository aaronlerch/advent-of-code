#!/usr/bin/env ruby

require_relative './utils'

input = File.readlines("input.txt")

segments = []

input.each do |line|
    # parse the data into match data of x1,y1,x2,y2
    m = line.match /(\d+),(\d+) -> (\d+),(\d+)/i
    segments << Segment.new(m[1].to_i, m[2].to_i, m[3].to_i, m[4].to_i)
end

puts "Got #{segments.length} total line segments"

horiz_and_vert_only = segments.select { |s| s.x1 == s.x2 || s.y1 == s.y2 }

puts "#{horiz_and_vert_only.length} are horizontal or vertical only"

# Create a sparse matrix for tracking intersections
sparse = {}

horiz_and_vert_only.each do |seg|
    # expand the line segment into individual data points
    seg.to_points.each { |pt| log(sparse, pt) }
end

print_intersection_count sparse

diag = segments.select { |s| s.x1 != s.x2 && s.y1 != s.y2 }

# find intersecting points for the remaining diagonal lines
puts "#{diag.length} are diagonal"

diag.each do |seg|
    seg.to_points.each { |pt| log(sparse, pt) }
end

print_intersection_count sparse