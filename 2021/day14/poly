#!/usr/bin/env ruby

INPUT_FILE = "input.txt"
input = File.readlines(INPUT_FILE).map(&:chomp)

rules = {} # when -> insert
template = input.shift

input.shift # blank line
until (line = input.shift).nil? || line.empty?
    from, insert = line.split ' -> '
    rules[from] = insert
end

def initialize_pairs(polymer)
    pairs = Hash.new(0)
    polymer.chars.each_with_index do |ch, i|
        next_char = polymer[i+1]
        unless next_char.nil?
            pair = ch + next_char
            pairs[pair] += 1
        end
    end
    return pairs
end

def step(pairs, rules)
    # iterate over pairs and apply insertion rules
    new_pairs = Hash.new(0)

    pairs.each do |pair, count|
        insert = rules[pair]
        next if insert.nil?

        first = pair[0] + insert
        second = insert + pair[1]

        # For as many original pairs as we were tracking, we add the same number of new pairs
        new_pairs[first] += count
        new_pairs[second] += count
    end
    return new_pairs
end

def count_of_unique_elements(pairs)
    elements = Hash.new(0) # element -> count
    pairs.each do |pair, count|
        elements[pair[0]] += count
    end
    return elements
end

puts "Template: #{template}"

# STEP 1: Apply 10 steps, find most and least common elements, find most - least
# STEP 2: Apply 40 steps

STEPS=40

pairs = initialize_pairs(template)
last_element = template[template.length - 1]

(1..STEPS).each do |i|
    pairs = step(pairs, rules)
end

elements = count_of_unique_elements(pairs)

# add back in the last element which got excluded in the algorithm above
elements[last_element] += 1

max_element = elements.max_by { |k,v| v }
min_element = elements.min_by { |k,v| v }

puts "MAX ELEMENT: #{max_element[0]} (#{max_element[1]})"
puts "MIN ELEMENT: #{min_element[0]} (#{min_element[1]})"

puts "RESULT: #{max_element[1] - min_element[1]}"