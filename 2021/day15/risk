#!/usr/bin/env ruby

require_relative './node'
require_relative './map_expander'

INPUT_FILE = "input.txt"
input = File.readlines(INPUT_FILE).map(&:chomp)

grid = []
input.each { |line| grid << line.chars.map(&:to_i) }

grid = MapExpander.expand(grid)

@max_y = grid.length - 1
@max_x = grid.first.length - 1

puts "Initializing nodes"

# Create one node per location (to reuse objects)
nodes = {}
(0..@max_y).each do |y|
    (0..@max_x).each do |x|
        nodes[[y,x]] = Node.new(y, x, grid[y][x])
    end
end

puts "Initialized nodes"
puts "Initializing node neighbors"

# Now for each node, connect the neighbors
(0..@max_y).each do |y|
    (0..@max_x).each do |x|
        node = nodes[[y,x]]
        # all neighbors
        node.neighbors = [nodes[[y,x+1]], nodes[[y+1,x]], nodes[[y,x-1]], nodes[[y-1,x]]].compact.sort_by { |n| n.value }
        # right and down only
        #node.neighbors = [nodes[[y,x+1]], nodes[[y+1,x]]].compact.sort_by { |n| n.value }
    end
end

start_node = nodes[[0,0]]
goal_node = nodes[[@max_y,@max_x]]

# Implement an A* search algorithm

def reconstruct_path(came_from, current)
    total_path = [current]
    while came_from.keys.include? current
        current = came_from[current]
        total_path.prepend current
    end
    return total_path
end

def a_star(start, goal, h)
    open_set = [start]
    came_from = {}
    g_score = Hash.new(Float::INFINITY)
    g_score[start] = 0
    f_score = Hash.new(Float::INFINITY)
    f_score[start] = h.call(start)

    while !open_set.empty?
        current = open_set.first # assumes sorted by current f_score value
        if current == goal
            return reconstruct_path(came_from, current)
        end

        open_set.delete current

        current.neighbors.each do |neighbor|
            tentative_g_score = g_score[current] + neighbor.value
            if tentative_g_score < g_score[neighbor]
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = tentative_g_score + h.call(neighbor)
                unless open_set.include? neighbor
                    open_set << neighbor
                end
            end
        end

        open_set.sort_by! { |n| f_score[n] }
    end
end

puts "Running the A* algorithm"

path = a_star(start_node, goal_node, -> (node) { node.value })
result = path.sum { |n| n.value } - start_node.value

puts "Risk of best path: #{result}"

# puts path