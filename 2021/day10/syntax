#!/usr/bin/env ruby

input = File.readlines("input.txt").map(&:chomp)

OPEN_PAREN='('
OPEN_SQUARE='['
OPEN_CURLY='{'
OPEN_ANGLE='<'
CLOSE_PAREN=')'
CLOSE_SQUARE=']'
CLOSE_CURLY='}'
CLOSE_ANGLE='>'

opens = [OPEN_PAREN, OPEN_SQUARE, OPEN_CURLY, OPEN_ANGLE]
closes = [CLOSE_PAREN, CLOSE_SQUARE, CLOSE_CURLY, CLOSE_ANGLE]

open_close_pairs = {
    OPEN_PAREN => CLOSE_PAREN,
    OPEN_SQUARE => CLOSE_SQUARE,
    OPEN_CURLY => CLOSE_CURLY,
    OPEN_ANGLE => CLOSE_ANGLE
}

corrupt_point_map = {
    CLOSE_PAREN => 3,
    CLOSE_SQUARE => 57,
    CLOSE_CURLY => 1197,
    CLOSE_ANGLE => 25137
}

incomplete_point_map = {
    CLOSE_PAREN => 1,
    CLOSE_SQUARE => 2,
    CLOSE_CURLY => 3,
    CLOSE_ANGLE => 4
}

corrupt_points = 0
incomplete_scores = []

# to process a chunk we use a stack data structure (in ruby, that's an array)
input.each do |line|
    stack = []
    corrupt = false
    line.chars.each do |c|
        if opens.include? c
            # if it's an opening, push
            stack.push c
        elsif closes.include? c
            # if it's a closing, pop and verify
            open = stack.pop
            break if open.nil? # for now, ignore incomplete lines
            if open_close_pairs[open] != c
                # CORRUPTED
                puts "Expected #{open_close_pairs[open]}, but found #{c} instead."
                corrupt_points += corrupt_point_map[c]
                corrupt = true
                break
            end
        end
    end

    next if corrupt || stack.empty?

    puts "unprocessed: #{stack}"

    # if we got here, the line is just incomplete
    # we need to continue to pop the stack to determine valid ending characters
    finish = []
    while o = stack.pop
        finish << open_close_pairs[o]
    end

    # score the results
    score = 0
    finish.each do |f|
        score *= 5
        score += incomplete_point_map[f]
    end
    incomplete_scores << score
end

sorted = incomplete_scores.sort
middle = sorted[sorted.length / 2]

puts "CORRUPTED POINTS: #{corrupt_points}"
puts "INCOMPLETE SCORE: #{middle}"
